on: push

jobs:
  java:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: [ '8', '11', '14', '15', '17', '21' ]
    name: Java - jvm version ${{ matrix.java-version }} 
    steps:
      - uses: actions/checkout@v4
      - name: java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'
      - run: |
          cd java 
          mvn test

  clojure:
    runs-on: ubuntu-latest
    name: Clojure
    steps:
      - uses: actions/checkout@v4
      - name: install jdk 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: install lein
        uses: DeLaGuardo/setup-clojure@3.4
        with:
          lein: 2.9.6
      - name: leiningen version
        run: lein -v
      - name: leiningen test
        run: |
          cd clojure
          lein test

  scala:
    runs-on: ubuntu-latest
    name: Scala
    env:
      JAVA_OPTS: -Xms2048M -Xmx2048M -Xss6M -XX:ReservedCodeCacheSize=256M -Dfile.encoding=UTF-8
      JVM_OPTS:  -Xms2048M -Xmx2048M -Xss6M -XX:ReservedCodeCacheSize=256M -Dfile.encoding=UTF-8
    steps:
    - uses: actions/checkout@v4
    - uses: olafurpg/setup-scala@v12
    - name: test
      run: |
        cd scala
        sbt -v +test

  python:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8] # 2.7
    name: Python version ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          cd python/armstrong
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: test python
        run: |
          cd python/test
          python test_armstrong.py

  typescript:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x, 14.x] # 10.x, 
    name: Typescript version ${{ matrix.node-version }}
    steps:
    - uses: actions/checkout@v4
    - name: node v ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - run: |
        cd typescript
        yarn install
        yarn lint:ci
        yarn test

  kotlin:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: [ '8', '11', '14', '15', '17', '21' ]
    name: Kotlin - jvm version ${{ matrix.java-version }}
    steps:
      - uses: actions/checkout@v4
      - name: java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: test kotlin
        run: cd kotlin && ./gradlew test
      - name: lint kotlin
        run: cd kotlin && ./gradlew ktlintCheck

  golang:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [ '1.19', '1.20', '1.21.x' ]
    name: Go version ${{ matrix.go-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: test go code
        run: cd go && go test

  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: # remove when merging to main
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Update local toolchain
        run: |
          rustup update
          rustup component add clippy
          rustup install nightly          
      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version          
      - name: Test
        run: |
          cd rust
          cargo check
          cargo test --all          
      - name: Lint
        run: |
          cd rust
          cargo fmt --all -- --check
          cargo clippy -- -D warnings       # - name: Build
      #   run: |
      #     cd phaser
      #     cargo build --release  